#pragma kernel MeshDataConvert

struct DotData
{
    // pad란 더미 데이터 GPU는 16바이트 단위로 읽을 수록 효율이 좋기에 더미를 넣어두는것
    float3 Vertex;
    float pad0;
    
    float3 Normal;
    float pad1;
    
    float2 UV;
    int Index;
    float pad2;
};

struct PolygonData
{
    DotData Dot0;
    DotData Dot1;
    DotData Dot2;
};

int triangleLength;

StructuredBuffer<float3> vertices;
StructuredBuffer<float3> normals;
StructuredBuffer<float2> uvs;
StructuredBuffer<int> triangles; // 삼각형 인덱스 배열
RWStructuredBuffer<PolygonData> outputPolygonData;

[numthreads(32,1,1)]
void MeshDataConvert (uint3 id : SV_DispatchThreadID)
{
    int idx = id.x;
    if(idx >= triangleLength)
        return;
    
    PolygonData polygon = (PolygonData)0;
    const int index0 = triangles[idx * 3 + 0];
    polygon.Dot0.Vertex = vertices[index0];
    polygon.Dot0.Normal = normals[index0];
    polygon.Dot0.UV = uvs[index0];
    polygon.Dot0.Index = index0;

    const int index1 = triangles[idx * 3 + 1];
    polygon.Dot1.Vertex = vertices[index1];
    polygon.Dot1.Normal = normals[index1];
    polygon.Dot1.UV = uvs[index1];
    polygon.Dot1.Index = index1;

    const int index2 = triangles[idx * 3 + 2];
    polygon.Dot2.Vertex = vertices[index2];
    polygon.Dot2.Normal = normals[index2];
    polygon.Dot2.UV = uvs[index2];
    polygon.Dot2.Index = index2;

    outputPolygonData[idx] = polygon;
}
